class Config(object):
    DEBUG=True

    # Flask-Mail setup
    # Having a working email setup is necessary in order to allow user sign-ups
    # if OAuth is not used. For more info about configuration values, visit
    # https://pythonhosted.org/Flask-Mail/
    MAIL_SERVER = ''
    MAIL_PORT = 465
    MAIL_USE_SSL = True
    MAIL_USERNAME = ''
    MAIL_PASSWORD = ''
    MAIL_DEFAULT_SENDER = ''

    # Flask-Security setup
    # Check out sensible configuration values at https://pythonhosted.org/Flask-Security/
    SECURITY_LOGIN_WITHOUT_CONFIRMATION = False
    SECURITY_REGISTERABLE = True
    SECURITY_RECOVERABLE = True
    SECURITY_CHANGEABLE = True
    SECUIRTY_POST_LOGIN = '/'
    SECURITY_PASSWORD_HASH = 'sha512_crypt' #bcrypt or plaintext for testing
    SECURITY_PASSWORD_SALT = '__SECURITY_PASSWORD_SALT'
    SECURITY_EMAIL_SENDER = ''
    SECURITY_LOGIN_USER_TEMPLATE = 'security/login_user.html'
    SECURITY_REGISTER_USER_TEMPLATE = 'security/register_user.html'

    # Google analytics setup
    # All these values can be left empty
    GOOGLE_ANALYTICS_TRACKING_ID = ''
    GOOGLE_ANALYTICS_DOMAIN = ''
    GOOGLE_SITE_VERIFICATION = ''


class Development(Config):
    PORT = 5000
    HOST = '0.0.0.0'
    # Generate a random secret key (setup.sh does it for you)
    SECRET_KEY = '__SECRET_KEY'
    # The database path. By default it's a simple sqlite db, but any backend
    # supported by SQLAlchemy is available.
    SQLALCHEMY_DATABASE_URI = 'sqlite:////tmp/test.db'

    # Save (and eventually serve) a copy of the images uploaded to the CDNs
    USE_UPLOADS_LOCAL_STORAGE = True
    # Specify a custom local storage path. Do not edit unless you know about
    # the static folder configuration in Flask.
    #UPLOADS_LOCAL_STORAGE_PATH = ""
    # We mimc the settings of Imgur
    UPLOADS_LOCAL_STORAGE_THUMBNAILS = {
        's': {'size': (90, 90), 'crop': True},
        'b': {'size': (160, 160), 'crop': True},
        't': {'size': (160, 160), 'crop': False},
        'm': {'size': (320, 320), 'crop': False},
        'l': {'size': (640, 640), 'crop': False},
        'h': {'size': (1024, 1024), 'crop': False}
    }

    # Caching settings
    # Check out https://pythonhosted.org/Flask-Cache/ for configuration values
    # Currently we rely on Redis for high performance caching. This one of the
    # weakest spots of the application and could use some improvement.
    # Without caching, the generation of pages can take up to a few seconds.
    CACHE_DEFAULT_TIMEOUT = 60
    CACHE_TYPE = 'null' # filesystem or null
    CACHE_DIR = ''
    # CACHE_TYPE = 'redis'
    # CACHE_KEY_PREFIX = 'today_'
    # CACHE_REDIS_HOST = 'localhost'
    # CACHE_REDIS_PORT = '6379'
    # CACHE_REDIS_URL = 'redis://localhost:6379'

    # Configuration for OAuth.
    # SOCIAL_GOOGLE = {
    #     'consumer_key': '',
    #     'consumer_secret': ''
    # }
    # SOCIAL_FACEBOOK = {
    #     'app_id': '',
    #     'app_secret': ''
    # }
    # SOCIAL_BLENDER_ID = {
    #     'app_id': '',
    #     'app_secret': ''
    # }
    # SOCIAL_TWITTER = {
    #     'app_id': '',
    #     'app_secret': '',
    #     'access_token' : '',
    #     'access_token_secret' : ''
    # }

    # Leave these values empty, blender-id authentication is not yet available.
    BLENDER_ID_BASE_URL = ''
    BLENDER_ID_BASE_ACCESS_TOKEN_URL = ''
    BLENDER_ID_AUTHORIZE_URL = ''


    # We suggest to take advantage of Imgur to serve the images uploaded with
    # every post. If Imgur is enabled, we recomment turning caching on as well,
    # to prevent the Imgur API to block the many requests that will be generated
    # at every page load.
    #IMGUR_CLIENT_ID = ''
    IMGUR_CLIENT_SECRET = ''

    # Embedly is used to retrieve preview images when creating a new post. This
    # is not a hard requirement for a local deployment.
    EMBEDLY_APY_KEY = ''

    BUGSNAG_KEY = ''
    BUGSNAG_APP_PATH = ''

    DEBUG_TB_INTERCEPT_REDIRECTS = False
    DEBUG_TB_ENABLED = False

class Deployment(Development):
    DEPLOYMENT = 'Development'

