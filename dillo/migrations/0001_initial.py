# Generated by Django 2.2.2 on 2019-10-06 18:12

import dillo.models.posts
import dillo.models.mixins
import dillo.validators
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import hashid_field.field
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
        ('actstream', '0003_add_follow_flag'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(auto_now_add=True, verbose_name='date created'),
                ),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                (
                    'hash_id',
                    hashid_field.field.HashidField(
                        alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',
                        min_length=7,
                        null=True,
                    ),
                ),
                ('title', models.TextField(null=True)),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('draft', 'Draft'),
                            ('processing', 'Processing'),
                            ('published', 'Published'),
                        ],
                        default='draft',
                        max_length=20,
                    ),
                ),
                (
                    'visibility',
                    models.CharField(
                        choices=[
                            ('public', 'Public'),
                            ('unlisted', 'Unlisted'),
                            ('private', 'Private'),
                        ],
                        default='public',
                        max_length=20,
                    ),
                ),
                (
                    'tags',
                    taggit.managers.TaggableManager(
                        help_text='A comma-separated list of tags.',
                        through='taggit.TaggedItem',
                        to='taggit.Tag',
                        verbose_name='Tags',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={'ordering': ['-created_at'],},
        ),
        migrations.CreateModel(
            name='PostMediaImage',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'image',
                    models.ImageField(
                        blank=True,
                        height_field='height',
                        upload_to=dillo.models.mixins.get_upload_to_hashed_path,
                        width_field='width',
                    ),
                ),
                ('height', models.PositiveIntegerField()),
                ('width', models.PositiveIntegerField()),
                ('source_filename', models.CharField(max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostMediaVideo',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'source',
                    models.FileField(
                        blank=True, upload_to=dillo.models.mixins.get_upload_to_hashed_path
                    ),
                ),
                ('source_metadata', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('source_filename', models.CharField(max_length=128, null=True)),
                ('framerate', models.FloatField(null=True)),
                ('aspect', models.FloatField(null=True)),
                ('encoding_job_id', models.IntegerField(null=True)),
                ('encoding_job_status', models.CharField(max_length=128, null=True)),
                (
                    'thumbnail',
                    models.ImageField(
                        blank=True,
                        height_field='thumbnail_height',
                        upload_to='',
                        width_field='thumbnail_width',
                    ),
                ),
                ('thumbnail_height', models.PositiveIntegerField(blank=True, null=True)),
                ('thumbnail_width', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                (
                    'created_at',
                    models.DateTimeField(auto_now_add=True, verbose_name='date created'),
                ),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                (
                    'user',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ('name', models.CharField(max_length=125)),
                ('bio', models.TextField(blank=True, max_length=512)),
                ('website', models.URLField(blank=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                (
                    'reel',
                    models.URLField(blank=True, validators=[dillo.validators.validate_reel_url]),
                ),
                (
                    'avatar',
                    models.ImageField(
                        blank=True,
                        height_field='avatar_height',
                        upload_to=dillo.models.mixins.get_upload_to_hashed_path,
                        width_field='avatar_width',
                    ),
                ),
                ('avatar_height', models.PositiveIntegerField(null=True)),
                ('avatar_width', models.PositiveIntegerField(null=True)),
                (
                    'header',
                    models.ImageField(
                        blank=True,
                        height_field='header_height',
                        upload_to=dillo.models.mixins.get_upload_to_hashed_path,
                        width_field='header_width',
                    ),
                ),
                ('header_height', models.PositiveIntegerField(null=True)),
                ('header_width', models.PositiveIntegerField(null=True)),
                ('likes_count', models.PositiveIntegerField(default=0)),
            ],
            options={'abstract': False,},
        ),
        migrations.CreateModel(
            name='ProfileLinks',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('url', models.URLField()),
                ('social', models.CharField(blank=True, max_length=50)),
                (
                    'profile',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='links',
                        to='dillo.Profile',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='PostMedia',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('order', models.PositiveIntegerField(default=0)),
                ('object_id', models.PositiveIntegerField()),
                (
                    'content_type',
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(('app_label', 'dillo'), ('model', 'PostMediaImage')),
                            models.Q(('app_label', 'dillo'), ('model', 'PostMediaVideo')),
                            _connector='OR',
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to='contenttypes.ContentType',
                    ),
                ),
                (
                    'post',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dillo.Post'),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Mentions',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('object_id', models.PositiveIntegerField()),
                (
                    'content_type',
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(('app_label', 'dillo'), ('model', 'Post')),
                            models.Q(('app_label', 'dillo'), ('model', 'Comment')),
                            _connector='OR',
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to='contenttypes.ContentType',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('object_id', models.PositiveIntegerField()),
                (
                    'content_type',
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(('app_label', 'dillo'), ('model', 'Post')),
                            models.Q(('app_label', 'dillo'), ('model', 'Comment')),
                            _connector='OR',
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to='contenttypes.ContentType',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='FeedEntry',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('is_read', models.BooleanField(default=False)),
                (
                    'created_at',
                    models.DateTimeField(auto_now_add=True, verbose_name='date created'),
                ),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                (
                    'category',
                    models.CharField(
                        choices=[
                            ('notification', 'Notification'),
                            ('timeline', 'Timeline'),
                            ('email', 'Email'),
                        ],
                        default='notification',
                        max_length=20,
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='actstream.Action'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='feed_entries',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={'ordering': ['-created_at'],},
        ),
        migrations.CreateModel(
            name='EmailNotificationsSettings',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'is_enabled',
                    models.BooleanField(
                        default=True,
                        help_text='Enable if you want to receive emails about comments to your content or replies to your comments.',
                        verbose_name='Email Notifications',
                    ),
                ),
                (
                    'user',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='email_notifications_settings',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='ContentReports',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('object_id', models.PositiveIntegerField()),
                ('reason', models.CharField(max_length=20)),
                ('notes', models.TextField(blank=True, max_length=512)),
                (
                    'content_type',
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(('app_label', 'dillo'), ('model', 'Post')),
                            models.Q(('app_label', 'dillo'), ('model', 'Comment')),
                            _connector='OR',
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        to='contenttypes.ContentType',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(auto_now_add=True, verbose_name='date created'),
                ),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('content', models.TextField(max_length=1024)),
                (
                    'parent_comment',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='dillo.Comment',
                    ),
                ),
                (
                    'post',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dillo.Post'),
                ),
                (
                    'tags',
                    taggit.managers.TaggableManager(
                        help_text='A comma-separated list of tags.',
                        through='taggit.TaggedItem',
                        to='taggit.Tag',
                        verbose_name='Tags',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={'ordering': ['-created_at'],},
        ),
    ]
