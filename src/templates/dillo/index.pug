| {% extends 'layout.html' %}
| {% set page_name = 'posts-index' %}

| {% if main_project._id == project._id %}
| {% set is_main_project = 'main-project' %}
| {% endif %}

| {% if project %}
| {% set community_name = 'main-project' if (main_project._id == project._id) else ('c-' + project.url)  %}
| {% endif %}

| {% block page_title %}
| {{ (col_right['post'].name if 'post' in col_right) }}
| {% endblock page_title %}

| {% block bodyattrs %}
| {{ super() }}
| class='{{ page_name }} {% if current_user.is_authenticated %}logged-in{% endif %} {{ community_name }}' data-context='{{ page_name }}'
| {% endblock bodyattrs %}


| {% block submit_btn %}
| {% from 'dillo/macros/_submit_button.html' import submit_button %}
| {{ submit_button(submit_menu, project) }}
| {% endblock submit_btn %}


| {% block body %}
#col_main.listing-list
	.d-flex.listing-facets.py-2.px-1
		#facets.d-flex
		.ml-auto
			select(
				id="js-list-sort-by",
				class="js-styleselect",
				title="{{ _('Sort by') }}")
				option(value="hot", selected) {{ _('Hot') }}
				option(value="new") {{ _('New') }}
				option(value="top") {{ _('Top') }}

			button.wgt-display-mode-toggle.btn.wgt.btn-icon-only(
				title="{{ _('Toggle Display Mode') }}")
				i.pi-layout

	#list-hits
		.d-flex.justify-content-center.p-5
			i.h3.pi-spin.spin.text-secondary

	.listing-list-info
		#list-stats
		#list-pagination-bottom

#col_right.listing-view
	.fullscreen-overlay.js-toggle-fullscreen
	#list-item
		| {% if 'post' in col_right %}
		.item-view.loading
			.item-view-header
				.item-content.d-flex.py-2
					.item-rating-box.p-1
						.item-rating.up
							i.pi-angle-up
						.item-rating.value &#x221e;
						.item-rating.down
							i.pi-angle-down
					.item-details
						ul.text-secondary.px-0.py-1.m-0
							li
								i.pi-spin.spin
								span {{ _('Fetching the goods...') }}
						a#item-title.item-title {{ col_right['post']['name'] }}
			.item-body

		| {% elif 'activities' in col_right %}
		.welcome.p-4.m-1
			.d-flex
				| {% if project.picture_square %}
				a.welcome-logo.mr-4(href="{{ url_for('posts.index', community_url=project.url) }}")
					img.w-100(src="{{ project.picture_square.thumbnail('l') }}", alt="{{ project.name }} logo")
				| {% endif %}

				.d-block
					a.h3.my-1.d-block(href="{{ url_for('posts.index', community_url=project.url) }}")
						| {{ project.name }}

					| {% if project.summary %}
					span {{ project.summary }}
					| {% endif %}

					| {% if not is_main_project %}
					| {# Follow + Social buttons #}
					.d-flex.align-items-center
						| {% if community_is_followed %}
						a.btn.btn-primary-outline.px-5.mt-3(
							href="#",
							id="follow-toggle",
							data-action="unfollow")
							| Unfollow
						| {% else %}
						a.btn.btn-primary.px-5.mt-3(
							href="#",
							id="follow-toggle",
							data-action="follow")
							| Follow
						| {% endif %}

						| {% if project.extension_props.dillo %}

						| {% if project.extension_props.dillo.social %}
						ul.social.ml-3
							| {% for name, val in project.extension_props.dillo.social.to_dict().items() %}
							| {% if val %}
							li
								a(class="pi-social-{{ name }}",
									title="{{ name | undertitle }}",
									href="{{ val }}")
							| {% endif %}
							| {% endfor %}
						| {% endif %}
						| {% endif %}
					| {% endif %}

			.node-details-description.p-3.pt-5
				| {{ project.description | markdown }}


			| {% if is_main_project %}
			.d-communities-list
				span.d-communities-title {{ _('COMMUNITIES') }}

				| {% from 'dillo/macros/_communities.html' import communities_list %}
				| {{ communities_list(communities) }}

			| {% else %}
			.d-activity
				.title {{ _('What\'s going on') }}:

				| {% if col_right['activities']['_meta']['total'] %}
				ul
					| {% for act in col_right['activities']['_items'] %}
					| {% if act.link and act['actor_user']['email'] %}
					li
						a(href="{{ act.link }}")
							img.actor-avatar(src="{{ act['actor_user']['email'] | gravatar }}", alt="{{ _('Avatar') }}")
							span.date(title="{{ act._created }}") {{ act._created | pretty_date }}
							span.actor {{ act['actor_user']['full_name'] }}
							span.verb {{ act.verb }}
					| {% endif %}
					| {% endfor %}
				| {% else %}
				p {{ _('No activity... yet!') }}
				| {% endif %}
			| {% endif %}

		| {% endif %}


| {% endblock body %}

| {% block footer_scripts %}
script.
	//- Set project ID to for Javascript to enable/disable certain properties (like submit dialog).
	ProjectUtils.setProjectAttributes({projectId: '{{project._id}}', projectUrl: '{{project.url}}'});

	// Save state the first time we load the page
	// For example, to load the post fullscreen
	var first_time = true;

	$(document).ready(function () {
		function moveFacetElements($dataHtml) {
			//- Capture the list-facet element and move it before #list-sort-by
			var $facetTags = $dataHtml.filter(".js-move-facet").detach();
			$("#facets").html($facetTags);
		}

		function fetchPosts(params, append) {
			/*
			Fetch posts and append them to the posts list.
			*/

			//- The query string parameters (sorting and page)
			if (params === undefined) { params = {} };
			//- Do we want to append the results to the current list, or replace it?
			//- The first case is used for changing sorting, the second for pagination
			if (append === undefined) { append = false};

			//- Add the community_id to params as a filter, if we are in a community
			{% if not is_main_project %}
			params['community_id'] = "{{project._id}}";
			{% endif %}

			//- The endpoint where we query for posts
			$.get("{{ url_for('posts.posts_list') }}", params, function (dataHtml) {
				var $dataHtml = $(dataHtml);
				if (append) {
					//- We are probably paginating
					$('#list-hits').append($dataHtml);
				} else {
					//- We are probably sorting
					$('#list-hits').html($dataHtml);
				}

				moveFacetElements($dataHtml);
			});
		}

		//- If a post is specified, load it before the left column.
		{% if 'post' in col_right %}

			var item_url = "{{ url_for('posts.view', community_url=project.url, post_shortcode=col_right['post'].properties.shortcode, _external=True, _scheme=config['PREFERRED_URL_SCHEME']) }}";

			if (location.hash) {item_url += location.hash;};

			// When loading the page for the first time, load post fullscreen
			if (first_time) {
				enterFullscreen();
			}

			item_open("{{ col_right['post']['_id'] }}", item_url);
		{% endif %}

		//- Load default posts.
		fetchPosts();

		var $sortingDropDown = $("#js-list-sort-by");

		$sortingDropDown.change(function () {
			//- TODO(fsiddi) prevent reloading of same sorting
			fetchPosts({'sorting': $(this).val()});
		});

		//- Pagination: load more posts
		$('body').on('click', '.js-load-next-page', function(e){
			e.preventDefault();

			//- Remove button and its container
			$(this).parent().remove();

			let queryString = buildQueryString();
			//- Specify the next page
			queryString['page'] = $(this).data('next-page');

			//- Look for a value in the search field and add it to the query
			let title = $('#q').val();
			if (title) {
				queryString['title'] = title;
			}

			fetchPosts(queryString, true);
		});

		function buildQueryString() {
			//- Build a query string based on the current status of the filters in the UI
			//- Define the base query
			var queryString = {'sorting': $sortingDropDown.val()}
			//- Get all query string filter values (filter_tags, filter_status_dev, etc)
			$('body .js-facet').each(function (index) {
				let filter = $(this).data('filter');
				//- Append the filter based on the current facet
				queryString[filter] = [$(this).val()];
			});
			return queryString;
		}

		$(document).on('change', 'body .js-facet', function (e) {
			let queryString = buildQueryString();
			fetchPosts(queryString);
		});

		$("#q").on("keypress", function (e) {
			if (e.which === 13) {
				let queryString = buildQueryString();
				queryString['title'] = $(this).val();
				fetchPosts(queryString);
			}
		});

		//- Follow Communities
		$('#follow-toggle').on('click', function (e) {
			e.preventDefault();
			//- Reference action button
			var $actionButton = $(this);
			var action = $actionButton.data('action');

			//- Define url, depending on the current status
			if (action === 'follow') {
				var url = "{{ url_for('communities_api.follow', project_id=project._id) }}";
			} else {
				var url = "{{ url_for('communities_api.unfollow', project_id=project._id) }}";
			}

			//- AJAX request to follow or unfollow
			$.post(url)
				.done(function (data) {
					toastr.success(data.message);
					//- Update button
					if (action === 'follow') {
						$actionButton.data('action', 'unfollow');
						$actionButton.text('Unfollow');
					} else {
						$actionButton.data('action', 'follow');
						$actionButton.text('Follow');
					}
					$actionButton.toggleClass('btn-primary');
				})
				.fail(function (err) {
					toastr.error(xhrErrorResponseMessage(err), 'Not allowed');
				});
		});
	});

	twemoji.parse(document.body);
| {% endblock footer_scripts %}
