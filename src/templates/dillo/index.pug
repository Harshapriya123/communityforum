| {% extends 'dillo/layout.html' %}
| {% set page_name = 'posts-index' %}

| {% block page_title %}
| {{ (col_right['post'].name if 'post' in col_right else 'Home') }}
| {% endblock page_title %}

| {% block bodyattrs %}
| {{ super() }}
| class='{{ page_name }}{% if current_user.is_authenticated %} logged-in{% endif %}' data-context='{{ page_name }}'
| {% endblock bodyattrs %}

| {% block og %}
| {% if 'post' in col_right %}
meta(property="og:type", content="article")
meta(property="og:title", content="{{ col_right['post'].name }} - {{ config.SETTINGS_TITLE | safe }}")
meta(name="twitter:title" content="{{ col_right['post'].name }} - {{ config.SETTINGS_TITLE | safe }}")
meta(property="og:url",
		content="{{ url_for('posts.view', community_url=col_right['post'].project.url, post_shortcode=col_right['post'].properties.shortcode, _external=True) }}")
meta(property="article:published_time",
		content="{{ col_right['post']._created }}")

| {% if col_right['post'].properties.content %}
meta(name="twitter:description", content="{{ col_right['post'].properties.content | safe }}")
meta(property="og:description", content="{{ col_right['post'].properties.content | safe }}")
| {% endif %}

| {% if col_right['post'].picture %}
meta(property="og:image", content="{{ col_right['post'].picture.thumbnail('h') }}")
meta(name="twitter:image", content="{{ col_right['post'].picture.thumbnail('h') }}")
| {% endif %}

meta(property="article:title", content="{{ col_right['post'].name }}")
| {% if col_right['post'].user.full_name and col_right['post'].user.full_name != 'None' %}
meta(property="article:author",
		 content="{{col_right['post'].user.full_name}}")
meta(name="twitter:creator",
		 content="{{col_right['post'].user.full_name}}")
| {% else %}
meta(property="article:author",
		 content="{{ col_right['post'].user }}")
meta(name="twitter:creator",
		 content="{{col_right['post'].user.username}}")
| {% endif %}
| {% endif %}
| {% endblock og %}

| {% block submit_btn %}
li
	.btn-group
		button.btn.btn-submit.wgt-toggle-submit(
		data-action="publish",
		title="{{ _('Submit a Link [Shift+A]')}}")
			i.pi-link
			| {{ _('Submit Link') }}

		button.btn.btn-submit.wgt-dropdown-toggle
			i.pi-angle-down

			ul.dropdown-menu.right
				li
					a(
						href="{{ url_for('posts.create', community_url=project.url, post_type='text') }}",
						title="Write a Text post")
						i.pi-document-text
						|  {{ _('Write a Post') }}
| {% endblock submit_btn %}

| {% block body %}
#col_main.listing-list
	#list-hits

	.listing-list-info
		#list-stats
		#list-pagination

#col_right.listing-view
	#list-item
		| {% if 'post' in col_right %}
		.item-view.loading
			.item-content
				.item-rating-box
					.item-rating.up
						i.pi-angle-up
					.item-rating.value &#x221e;
					.item-rating.down
						i.pi-angle-down
				.item-details
					a#item-title.item-title {{ col_right['post']['name'] }}
					ul
						li
							i.pi-spin.spin
							span Fetching the goods...

		| {% elif 'activities' in col_right %}
		.welcome
			h2 {{ _('Welcome to Dillo') }}

			.d-activity
				| {% if col_right['activities']['_meta']['total'] %}
				ul
					| {% for act in col_right['activities']['_items'] %}
					li
						img.actor-avatar(src="{{ act['actor_user']['email'] | gravatar }}")
						span.date(title="{{ act._created }}") {{ act._created | pretty_date_time }}
						span.actor {{ act['actor_user']['full_name'] }}
						span.verb {{ act.verb }}
					| {% endfor %}
				| {% else %}
				p No activity (yet)!
				| {% endif %}
		| {% endif %}

|{% endblock body %}

| {% block footer_scripts %}
script.

	// Check if we're logged in and store it to use later
	var amAuthenticated = isAuthenticated();

	ProjectUtils.setProjectAttributes({projectId: '{{project._id}}', projectUrl: '{{project.url}}'});

	var search = instantsearch({
		appId: '{{ config.ALGOLIA_USER }}',
		apiKey: '{{ config.ALGOLIA_PUBLIC_KEY }}',
		indexName: '{{ config.ALGOLIA_INDEX_NODES }}',
		urlSync: {},
		searchParameters: {
			facets: ['project._id']
		}
	});

	search.addWidget({
		init: function (options) {
			// use options.helper (https://github.com/algolia/algoliasearch-helper-js) to initialize
			// the search with custom filters & parameters
			options.helper.addFacetRefinement('project._id', '{{ project._id }}');
		}
	});

	search.addWidget(
		instantsearch.widgets.searchBox({
			container: '#q',
			autofocus: false
		})
	);

	{% raw %}
	var hitTemplate =
		'<div class="list-hits-item {{ is_own }}" id="item-{{ objectID }}" data-id="{{ objectID }}" data-url="{{ url }}">' +
			'<a href="{{ url }}" class="item-thumbnail js-item-open{{#picture}} has-thumbnail{{/picture}} {{ is_link }}">' +
				'<div class="item-thumbnail-picture">' +
					'{{#picture}}' +
						'<img src="{{picture}}"/>' +
					'{{/picture}}' +
				'</div>' +
			'</a>' +
			'<div class="item-content" data-node-id="{{ objectID }}">' +
				'<div class="item-rating-box {{#is_positive}}rated {{is_positive}}{{/is_positive}}">' +
					'<div class="item-rating up">' +
						'<i class="pi-angle-up"></i>' +
					'</div>' +
					'<div class="item-rating value">' +
						'{{ rating }}' +
					'</div>' +
					'<div class="item-rating down">' +
						'<i class="pi-angle-down"></i>' +
					'</div>' +
				'</div>' +
				'<div class="item-details js-item-open">' +
					'<a href="{{ url }}" class="item-title">{{ name }}</a>' +
					'<ul>' +
						'{{#is_link}}' +
							'<li class="item-favicon">' +
								'<a class="js-follow-link" href="{{ link_url }}" target="_blank">' +
									'<img title="Link" src="https://www.google.com/s2/favicons?domain={{ link_url }}"/>' +
								'</a>' +
							'</li>' +
						'{{/is_link}}' +
						'<li>{{ category }}</li>' +
						'<li class="item-date">{{ created }}</li>' +
						'<li class="item-author"><a class="js-follow-link" href="/u/{{ user.username }}">{{ user.full_name }}</a></li>' +
						'<li class="item-comments">{{ comments_count }} <i class="pi-comment"></i></li>' +
					'</ul>' +
				'</div>' +
			'</div>' +
		'</div>';


	var noResultsTemplate =
		'<div class="listing-empty js-list-clear">' +
			'nothing found for' +
			'<span class="query">{{query}}</span>' +
			'<div class="query-clear">clear</div>' +
		'</div>';
	{% endraw %}


	function processHit(hit) {

		var key = 'dillo_' + hit.objectID;
		hit.is_positive = localStorage.getItem(key);

		if (hit.is_positive && hit.is_positive === 'true') {
			hit.is_positive = 'positive';
		} else if (hit.is_positive && hit.is_positive === 'false') {
			hit.is_positive = 'negative';
		}

		hit.created = moment.unix(hit.created).fromNow();
		hit.url = '/c/' + hit.project.url + '/' + hit.shortcode + '/' + hit.slug;

		if (hit.is_link) {
			hit.is_link = 'is-link';
			hit.link_url = hit.content;
			hit.link_short = shortenUrl(hit.content);
		}

		if (amAuthenticated) {
			if (hit.user._id == '{{ current_user.user_id }}'){
				hit.is_own = 'is-own';
			}
		}

		return hit;
	}


	search.addWidget(
		instantsearch.widgets.hits({
			container: '#list-hits',
			hitsPerPage: 10,
			templates: {
				empty: noResultsTemplate,
				item: hitTemplate
			},
			transformData: {
				item: processHit,
			}
		})
	);

	search.addWidget(
		instantsearch.widgets.menu({
			container: '#list-categories',
			attributeName: 'category',
			cssClasses: {
				root: 'wgt-dropdown-root',
				header: 'wgt-dropdown-header',
				body: 'wgt-dropdown-body dropdown-menu',
				link: 'wgt-dropdown-link',
				active: 'wgt-dropdown-active',
				count: 'wgt-dropdown-count',
			},
			templates: {
				header: "{{ _('Categories') }}"
			}
		})
	);

	search.addWidget(
		instantsearch.widgets.pagination({
			container: '#list-pagination',
			cssClasses: {
				root: 'wgt-pagination-root',
				link: 'wgt-pagination-link',
				item: 'wgt-pagination-item',
				active: 'wgt-pagination-active',
				disabled: 'wgt-pagination-disabled',
				first: 'wgt-pagination-first',
				last: 'wgt-pagination-last',
			},
			maxPages: 20,
			padding: 0,
			labels: {
				first: '<i class="pi-angle-double-left"></i>',
				previous: '<i class="pi-angle-left"></i>',
				next: '<i class="pi-angle-right"></i>',
				last: '<i class="pi-angle-double-right"></i>'
			},
			scrollTo: true,
			autoHideContainer: true
		})
	);

	search.addWidget(
		instantsearch.widgets.stats({
			container: '#list-stats',
			cssClasses: {
				root: 'wgt-stats-root',
			},
			autoHideContainer: true
		})
	);

	search.addWidget(
		instantsearch.widgets.currentRefinedValues({
			container: '#list-refined-values',
			attributes: [{name: 'category'}],
			onlyListedAttributes: true,
			clearAll: "before",
			templates: {
				clearAll: '<i class="pi-cancel"></i>'
			},
			cssClasses: {
				body: 'wgt-refined-values-body',
				count: 'wgt-refined-values-count',
				clearAll: 'wgt-refined-values-clear',
				link: 'wgt-refined-values-link'
			}
		})
	);

	search.start();

	var onRenderHandler = function() {
		twemoji.parse(document.body);
		updateTitle(unread_on_load, page_title);
	}

	search.on('render', onRenderHandler);

	{% if 'post' in col_right %}
		item_open('{{col_right['post']['_id']}}');
	{% endif %}

	$('body').on('click', '.js-list-clear', function(e){
		search.helper.setQuery('').search();
	});

| {% endblock footer_scripts %}
