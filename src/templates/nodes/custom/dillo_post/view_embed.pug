| {% if (current_user.user_id | string) == node.user._id %}
| {% set is_own = 'is-own' %}
| {% endif %}

| {% if (node.properties.post_type == 'link') %}
| {% set is_link = 'is-link' %}
| {% endif %}

| {% if node.properties.content_html %}
| {% set is_html = 'is-html' %}
| {% endif %}

.item-view(
	class="{{ node.properties.post_type }} {{ is_own }} c-{{ project.url }}")
	.item-view-header
		span.item-view-close.js-toggle-fullscreen(title="{{ _('Close Fullscreen') }}")
			i.pi-cancel-circle

		.item-content(
			id="{{ node._id }}",
			data-node-id="{{ node._id }}")

			.item-rating-box(
				class="{% if node._current_user_rating is not none %}rated {% if node._current_user_rating %}positive{% else %}negative{% endif %}{% endif %}")
				.item-rating.up(title="{{ _('Upvote this post') }}")
					i.pi-angle-up
				.item-rating.value(title="{{ _('Post Rating') }}") {{ node.properties.rating_positive - node.properties.rating_negative }}
				.item-rating.down(title="{{ _('Downvote this post') }}")
					i.pi-angle-down

			.item-details
				| {% if is_link %}
				a#item-title.item-title(
					href="{{ node.properties.content }}"
					target="_blank") {{ node.name }}
				| {% else %}
				span#item-title.item-title {{ node.name }}
				| {% endif %}
				ul
					li.item-community
						a(href="{{ url_for('posts.index', community_url=project.url) }}")
							| {{ project.name }}
					li.item-author
						a(href="{{ url_for('users.users_view', username=node.user.username )}}")
							| {{ node.user.full_name }}
					li
						a.item-date(
							title="{{ node._created }}",
							href="{{ url_for('posts.view', community_url=project.url, post_shortcode=node.properties.shortcode, _external=True) }}")
							| {{ node._created | pretty_date }}

					| {% if node.properties.tags %}
					li#item-tags
						| {% for tag in node.properties.tags %}
						| {{ tag }}{{ ", " if not loop.last }}
						| {% endfor %}
					| {% endif %}
					//- Add POST_ADDITIONAL_PROPERTIES filters here
					| {% for k, v in config['POST_ADDITIONAL_PROPERTIES'].items() %}
					//- If the dillo_post dyn_schema in this project supports this
					| {% if project.url in v['projects'] %}
					| {% if k in node.properties %}
					li(id="list-{{ k }}")
						| {{ v['label'] }}: {{ node.properties[k] }}
					| {% endif %}
					| {% endif %}
					| {% endfor %}


	| {% if not is_link %}
	.item-body#item-content
		.item-body-text
			| {% if is_html %}
			| {{ node.properties.content_html }}
			| {% else %}
			p {{ _('Write something nice.') }}
			| {% endif %}
	| {% endif %}


	| {% if is_link %}
	.item-link-container(
		class="{% if is_html %}is-embed{% endif %}")
		.item-body#item-content
			| {% if node.properties.content %}
			a.d-block.p-3(
				class="item-link-data",
				href="{{ node.properties.content }}",
				target="_blank",
				title="Visit URL")
				img.favicon(src="https://www.google.com/s2/favicons?domain={{ node.properties.content }}", alt="Favicon")
				| {{ node.properties.content }}
			| {% else %}
			span.item-link-data There should be content here.
			| {% endif %}

		| {# If it's a link with oembed support #}
		| {% if is_html %}
		#item-media.d-flex.justify-content-center.position-relative(
			class="item-media oembed")
			| {{ node.properties.content_html | safe }}
		| {% endif %}
	| {% endif %}

	| {# If the post is type link, only show if there is no oembed #}
	| {% if (node.picture and not is_link) or (node.picture and (is_link and not is_html)) %}
	a#item-media.d-flex.justify-content-center.position-relative(
		class="item-media js-item-thumbnail",
		href="{{ node.picture.thumbnail('h', api=api)}} ")
		img(
			src="{{ node.picture.thumbnail('l', api=api) }}",
			alt="{{ _('Thumbnail') }}",
			data-adaptive-background)
	| {% endif %}

	.item-info-panel
		.item-info-op
			a.op-avatar(
				href="{{ url_for('users.users_view', username=node.user.username )}}",
				title="{{ node.user.full_name }}")
				img(src="{{ node.user.email | gravatar }}", alt="{{ _('Avatar') }}")

			.op-details
				.op-name(href="{{ url_for('users.users_view', username=node.user.username )}}")
					a(href="{{ url_for('users.users_view', username=node.user.username )}}")
						| {{ node.user.full_name }}

					span.op-karma(title="Karma")
						| ({{ node.user.extension_props_public.dillo.karma }})

				.op-meta
					| {% if node.user.extension_props_public.dillo.links %}
					.op-links
						ul
							| {% for link in node.user.extension_props_public.dillo.links %}
							li
								a(href="{{ link.url }}", target="_blank", title="{{ link.name }}")
									img.favicon(src="https://www.google.com/s2/favicons?domain={{ link.url }}", alt="Favicon")
							| {% endfor %}
					| {% endif %}

		.item-info-action
			a.wgt-toggle-fullscreen.js-toggle-fullscreen(title="{{ _('Toggle Fullscreen') }}")
				i.pi-resize-full
			| {% if current_user.is_authenticated %}
			| {% if (node.user._id == current_user.objectid) or current_user.has_cap('admin') %}
			a.item-edit(href="{{ url_for('nodes.edit', node_id=node['_id']) }}")
				i.pi-edit
				| {{ _('Edit Post') }}
			| {% endif %}
			| {% endif %}

			a.social(
				title="{{ _('Share on Facebook') }}",
				href="https://www.facebook.com/sharer/sharer.php?u={{ node.name }}%20{{ url_for('posts.view', community_url=project.url, post_shortcode=node.properties.shortcode, _external=True) }}",
				target="_blank")
				i.pi-social-facebook

			a.social(
				title="{{ _('Share on Twitter') }}",
				href="https://twitter.com/home?status={{ node.name }} @{{ config.SETTINGS_TWITTER_USERNAME }} {{ url_for('posts.view', community_url=project.url, post_shortcode=node.properties.shortcode, _external=True) }} %23b3d" ,
				target="_blank")
				i.pi-social-twitter

			a.social(
				title="{{ _('Share on Reddit') }}",
				href="http://www.reddit.com/submit?url={{ url_for('posts.view', community_url=project.url, post_shortcode=node.properties.shortcode, _external=True) }}",
				target="_blank")
				i.pi-social-reddit

	#item-comments
		.item-commenting-on.py-3
			span {{ _("Leave a comment on") }} #[strong {{ project.name }} - {{ node.name }}]
		.comments-container
			comments-tree#comments-embed(
				parent-id="{{ node._id }}"
				)

script.

	var context = ProjectUtils.context();
	var search = instantsearch({
		appId: '{{ config.ALGOLIA_USER }}',
		apiKey: '{{ config.ALGOLIA_PUBLIC_KEY }}',
		indexName: '{{ config.ALGOLIA_INDEX_NODES }}',
		urlSync: {},
		searchParameters: {
			disjunctiveFacets: ['project._id']
		}
	});

	if (context != 'post-edit'){
		new Vue({el: '#comments-embed'});
	}

	if (context == 'posts-index'){
		var onRenderHandler = function() {
			// Set item on the list as active
			var item = '#item-{{ node._id }}';
			$(item).addClass('active');
		}

		search.on('render', onRenderHandler);
	}

	var page_title = '{{ node.name | striptags }} â€” {{ main_project.name | striptags }}';
	DocumentTitleAPI.set_page_title(page_title);

	// Parse emojis (very important! :) and date with momentjs (so it gets translations)
	$('#item-title').html(twemoji.parse('{{ node.name }}'));
	$('a.item-date').text(moment('{{ node._created }}').fromNow());

	{% if is_link %}
		$('#item-link-url').text(shortenUrl('{{ node.properties.content }}'));
	{% endif %}

	{% if not is_link %}
		var item_content = $('#item-content');
		item_content.html(twemoji.parse(item_content.text()));
	{% endif %}

	// If the parameter ?fs is in the url, go imax!
	if ('fs' in urlParams || isMobile()){
		enterFullscreen();
	}

	// Color the parent container of the item-media thumbnail
	$.adaptiveBackground.run();

	// Expand the images thumbnail
	$('.js-item-thumbnail').off('click').on('click', function(e){
		e.preventDefault();

		appOverlayClear();

		var $appOverlay = $('#app-overlay');

		// Bring the overlay and add an indication we're loading the image
		$appOverlay
			.addClass('active preview')
			.html('\
				<div class="overlay-background">\
					<i class="pi-spin spin"></i>\
				</div>\
			');

		// Get the url of the item-media
		var imageUrl = $(this).attr('href');

		// Load the image first
		var itemImage = new Image();
		itemImage.src = imageUrl;

		// Once it loaded, display it
		itemImage.addEventListener('load', function(){
			$appOverlay
				.html('\
					<div class="overlay-background">\
						<img src="' + imageUrl + '" data-adaptive-background="2" />\
					</div>\
				');

			// Color the background of the overlay
			var abOptions  = {
				selector: '[data-adaptive-background="2"]',
				transparent: '0.8'
			};

			$.adaptiveBackground.run(abOptions);
		});

	});

	$('body')
		.off('pillar:comments-loaded')
		.on('pillar:comments-loaded', function(){
		var itemComments = document.getElementById('item-comments');
		twemoji.parse(itemComments);
	});

	ga('send', 'pageview', location.pathname);
