| {% extends 'dillo/layout.html' %}
| {% block bodyattrs %}{{ super() }} data-context='post-edit'{% endblock %}
| {% block page_title %}Edit{% endblock %}

| {% block body %}

#col_main
	.item-edit-form

		ul.item-edit-tabs
			li(
				class="{% if node.properties.post_type == 'link' %}active{% endif %}",
				data-post-type='link')
				span LINK
				small I want to share a link
			li(
				class="{% if node.properties.post_type == 'text' %}active{% endif %}",
				data-post-type='text')
				span TEXT
				small I'll write a nice article

		.item-edit-header
			.item-edit-header-action
				a.btn.cancel(href="{{ url_for('nodes.view', node_id=node._id)}}") Cancel
				a#item-save.btn.publish(
					href="javascript:void(0);",
					title="Save changes")
					i.pi-check
					| Save Changes

		.item-edit-tab(
			id="item-edit-tab",
			class="{{ node.properties.post_type }}")
			form(
				id="item-edit-form",
				method="POST",
				enctype="multipart/form-data",
				action="{{url_for('nodes.edit', node_id=node._id)}}")

				| {{ form.csrf_token }}

				| {% for field in form %}

				| {% if field.name in ['csrf_token', 'status'] or field.type == 'HiddenField' %}
				| {{ field }}
				| {% elif field.name == 'name' %}
				input.item-title(
					id="name",
					value="{{ node.name }}",
					type="text",
					name="name",
					placeholder="Awesome Post Title")

				| {% elif field.name == 'content' %}
				textarea(
					id="content",
					name="content",
					placeholder="Paste or type the URL here")
					| {{ node.properties.content }}

				span.content-extra
					a(href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet")
						| Markdown Cheatsheet

				| {% elif field.name == 'category' %}
				.form-split
					.split-col
					.split-col
				select(
					id="category",
					name="category")
					option Community
					option Artwork

				| {% elif field.name == 'post_type' %}
				select(
					id="post_type",
					class="post_type",
					name="post_type")
					option(value="link") Link
					option(value="text",
						selected="{% if node.properties.post_type == 'text' %}selected{% endif %}") Text

				| {% endif %}
				| {% endfor %}


				//- textarea(
				//- 	name="content",
				//- 	id="content",
				//- 	placeholder="Paste or type the URL here")
				//- 	| {{ node.properties.content }}

				//- select(
				//- 	id="input-item-category",
				//- 	name="category")
				//- 	option Community
				//- 	option Artwork

				//- input(
				//- 	class="fileupload",
				//- 	id="input-item-file",
				//- 	name="file",
				//- 	type="file")

				//- select(
				//- 	id="post_type",
				//- 	class="post_type",
				//- 	name="post_type")
				//- 	option(value="link") Link
				//- 	option(value="text") Text

				//- |	{{ form.csrf_token }}

		//- .item-edit-tab(
		//- 	class="text {% if node.properties.post_type == 'text' %}active{% endif %}")
		//- 	form(
		//- 	id="item-edit-form",
		//- 	method="POST",
		//- 	enctype="multipart/form-data",
		//- 	action="{{ url_for('nodes.edit', node_id=node._id) }}")

		//- 		input.item-title(
		//- 			id="input-item-title",
		//- 			value="{{ node.name }}",
		//- 			type="text",
		//- 			placeholder="Post Title")

		//- 		textarea(
		//- 			id="content",
		//- 			placeholder="Witty description of your post.")
		//- 			| {{ node.properties.content }}
		//- 		a(href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet")
		//- 			| Markdown Cheatsheet


		//- 		select(
		//- 			id="input-item-category")
		//- 			option Community
		//- 			option Artwork

		//- 		input(
		//- 			id="input-item-file",
		//- 			type="file")

		//- 		select(
		//- 			id="post_type",
		//- 			class="post_type",
		//- 			name="post_type")
		//- 			option(value="link") Link
		//- 			option(value="text", selected) Text



#col_right.listing-view.item-edit-view
	.item-media
		i.pi-play

	.item-content(
		id="{{ node._id }}",
		data-node-id="{{ node._id }}")
		.item-rating-box(
			class="{% if node._current_user_rating is not none %}rated{% if node._current_user_rating %} positive{% else %} negative{% endif %}{% endif %}"
		)
			.item-rating.up
				i.pi-angle-up
			.item-rating.value {{ node.properties.rating_positive - node.properties.rating_negative }}
			.item-rating.down
				i.pi-angle-down
		.item-details
			a#item-title.item-title {{ node.name }}
			ul
				li {{ node.properties.category | undertitle }}
				li {{ node._created | pretty_date }}
				li {{ node.user.full_name }}

				| {% if node.properties.post_type == 'link' %}
				li {{ node.description }}
				| {% endif %}

	| {% if node.properties.post_type == 'text' %}
	.item-body#item-description
		| {{ node.description | safe }}
	| {% endif %}

| {% endblock body %}

| {% block footer_scripts %}
//- script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.ui.widget.min.js') }}")
//- script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.iframe-transport.min.js') }}")
//- script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.fileupload.min.js') }}")
//- script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.select2.min.js') }}")
//- script(src="{{ url_for('static_pillar', filename='assets/js/file_upload.min.js') }}")
script.
	// Markdown initialization
	var convert = new Markdown.getSanitizingConverter();
	Markdown.Extra.init(convert);
	convert = convert.makeHtml;

	// Convert Markdown and emojis for text and title
	$(function() {
		var item_title_input = $('#item-edit-form #name');
		var item_description_input = $('#content');

		item_title_input.keyup(function() {
			$('#item-title').html(
				twemoji.parse(
					item_title_input.val()
				)
			);
		}).trigger('keyup');

		item_description_input.keyup(function() {
			$('#item-description').html(
				twemoji.parse(
					convert(
						item_description_input.val()
					)
				)
			);
		}).trigger('keyup');

		$('input, textarea').keypress(function () {
			// Set the beforeunload to warn the user of unsaved changes
			$(window).on('beforeunload', function () {
				return 'You have unsaved changes in your post.';
			});
		});

		/* Resize textareas */
		item_description_input
			.autoResize()
			.blur();
	});


	$("#item-save").unbind( "click" );

	function uiUpdateOnSave(){
		var $item_save = $("#item-save");

		$item_save
			.removeClass('saving')
			.html('<i class="pi-check"></i> Save Changes');

		if (console){ console.log('saved') };
	}

	/* Submit changes */
	$("#item-edit-form").unbind("submit").submit(function(e) {
		e.preventDefault();

		/* Let us know started saving */
		$("#item-save")
			.addClass('saving')
			.html('<i class="pi-spin spin"></i> Saving...');

		$.ajax({
			url: "{{url_for('nodes.edit', node_id=node._id)}}",
			data: $(this).serialize(),
			type: 'POST'
		})
		.fail(function(xhr){
			/* Something went wrong, print it */
			setMessage(xhr);
			uiUpdateOnSave();
		})
		.done(function(dataHtml){
			// Disable beforeunolad when submitting a form
			$(window).off('beforeunload');

			$('#col_right').html(dataHtml);
			uiUpdateOnSave();
		});
	});

	$('#item-save').click(function(e){
		e.preventDefault();
		$("#item-edit-form").submit();
	});

| {% endblock footer_scripts %}
