| {% extends 'dillo/layout.html' %}
| {% block bodyattrs %}{{ super() }} data-context='post-edit'{% endblock %}
| {% block page_title %}Edit{% endblock %}

| {% block body %}

#col_main
	.item-edit-form
		| {% if node.properties.status == 'pending' %}
		ul.item-edit-tabs
			li(
				class="{% if node.properties.post_type == 'link' %}active{% endif %}",
				data-post-type='link')
				span LINK
				small I want to share a link
			li(
				class="{% if node.properties.post_type == 'text' %}active{% endif %}",
				data-post-type='text')
				span TEXT
				small I'll write a nice article
		| {% endif %}
		.item-edit-tab(
			id="item-edit-tab",
			class="{{ node.properties.post_type }}")
			form(
				id="item-edit-form",
				method="POST",
				enctype="multipart/form-data",
				action="{{url_for('nodes.edit', node_id=node._id)}}")

				.input-content.link
					label(for="content") URL
					input(
						disabled,
						name="content",
						type="text",
						class="input-field",
						placeholder="Paste or type the URL here",
						value="{{ node.properties.content }}")
					#item-icon.loading
						img(src="http://www.google.com/s2/favicons?domain={{ node.properties.content }}")

				.input-content.name
					label(for="name") Title
					input(
						id="name",
						value="{{ node.name }}",
						type="text",
						name="name",
						placeholder="Awesome Post Title")


				.input-content.text
					label(for="content") Text
					textarea(
						disabled,
						name="content",
						class="input-field",
						placeholder="Witty post description")
						| {{ node.properties.content }}

					span.content-extra
						a(href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet")
							| Markdown Cheatsheet

				.input-content.category
					label(for="category") Category
					select(
						id="category",
						name="category")
						| {% for option in config['POST_CATEGORIES'] %}
						| {% if option == node.properties.category %}
						option(selected) {{ option }}
						| {% else %}
						option {{ option }}
						| {% endif %}
						| {% endfor %}

				| {{ form.csrf_token }}
				| {{ form.status }}
				select(
					id="post_type",
					class="post_type",
					name="post_type")

					| {% if node.properties.post_type == 'link' %}
					option(value="link", selected) Link
					| {% else %}
					option(value="link") Link
					| {% endif %}

					| {% if node.properties.post_type == 'text' %}
					option(value="text", selected) Text
					| {% else %}
					option(value="text") Text
					| {% endif %}

				.form-upload-file
					| {{ form.picture }}


		.item-edit-header
			.item-status
				| Status:
				span {{ node.properties.status | undertitle }}
			.item-edit-header-action

				// TODO: Reload just #col_main with posts index
				| {% if node.properties.status == 'published' %}
				a.btn.cancel(href="{{ url_for('nodes.view', node_id=node._id)}}") Cancel
				| {% else %}
				a.btn.cancel(href="{{ url_for('posts.index')}}") Cancel
				| {% endif %}

				| {% if node.properties.status != 'published' %}
				.btn-group
					button.item-save-publish.btn.btn-success(
						data-action="publish",
						title="Make post publicly available")
						i.pi-check
						| Publish!

					button.btn.btn-success.dropdown-toggle
						i.pi-angle-down
					ul.dropdown-menu.right
						li
							span.item-save-publish(
								data-action="save",
								title="Save changes and keep editing")
								| {% if node.properties.status == 'pending' %}
								| Save Draft
								| {% else %}
								| Save Changes
								| {% endif %}

				| {% else %}
				button.item-save-publish.btn(
					data-action="save",
					title="Save changes"
				) Save Changes
				| {% endif %}


#col_right.listing-view.item-edit-view


| {% endblock body %}

| {% block footer_scripts %}
script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.ui.widget.min.js') }}")
script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.iframe-transport.min.js') }}")
script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.fileupload.min.js') }}")
script(src="{{ url_for('static_pillar', filename='assets/js/vendor/jquery.select2.min.js') }}")
script(src="{{ url_for('static_pillar', filename='assets/js/file_upload.min.js') }}")

script.

	// Set Project ID
	ProjectUtils.setProjectAttributes({projectId: "{{project._id}}", isProject: true, nodeId: '{{ node._id }}'});

	// Convert Markdown and emojis for text and title
	var convert = new Markdown.getSanitizingConverter();
	Markdown.Extra.init(convert);
	convert = convert.makeHtml;

	// Run on page load
	$(function() {

		// Load the content (in the sidebar) for the first time
		$.get("{{ url_for('nodes.view', node_id=node._id) }}", function (dataHtml) {
			$('#col_right').html(dataHtml);
			loadComments("{{ url_for('nodes.comments_for_node', node_id=node._id) }}");
		});

		// Enable the proper fields
		var input_content = $('.input-content.' + '{{ node.properties.post_type }}' + ' .input-field');
		input_content
			.prop('disabled', false)
			.attr('id', 'content');

		// Focus the #content field on load
		input_content.focus();

		var $item_title_input = $('#item-edit-form #name');
		var $item_content_input = $('.input-field');
		var $item_icon = $('#item-icon');
		var $item_title = $('#item-title');

		// Resize textarea when typing long text
		$item_content_input
			.autoResize()
			.blur();


		function parseText(content) {
			$('#item-content').html(
				twemoji.parse(
					convert(
						content
					)
				)
			);
		}

		function parseLink(content) {
			if (! ValidURL(content)) return;
			$item_icon.html('<i class="pi-spin spin"></i>');
			// Wait a bit before calling the spoon

			delay(function () {
				$.post("{{ url_for('posts.spoon')}}", {url: content})
					.done(function (data) {
						if (data) {
							console.log(data);

							// Set the name
							if (data.title) {
								$('input#name').val(data.title);
								$item_title.text(twemoji.parse(data.title));
							}

							// Get the favicon
							if (data.favicon) {
								$item_icon.html('<img src="' + data.favicon + ' "></i>');
							} else {
								$item_icon.html('<i class="pi-globe"></i>');
							}

							// Set the media
							if (data.oembed) {
								$('#item-media').html(data.oembed)
							}
						}
					})
					.fail(function (xhr) {
						toastr.info(xhr.statusText, 'Could not retrieve URL info');
						$item_icon.html('<i class="pi-globe"></i>');
					});
			}, 1000);
		}

		// When we type in the link field or in the textarea, process what we type accordingly
		$item_content_input.keyup(function () {
			var content = $(this).val();
			var post_type = $('#post_type').val();
			switch (post_type) {
				case 'link':
					parseLink(content);
					break;
				case 'text':
					parseText(content);
					break;
			}
		});


		$item_title_input.keyup(function() {
			$('#item-title').html(
				twemoji.parse(
					$item_title_input.val()
				)
			);
		});


		// Save Workflow
		var $item_save_publish_button = $(".item-save-publish");
		$item_save_publish_button.unbind( "click" );


		function uiUpdateOnSave(btn){
			btn
				.removeClass('saving')
				.html('<i class="pi-check"></i> Save Changes');
		}

		function setStatusOnSave() {
			/* Handle post state transitions
			pending -> draft
			draft -> draft
			published -> published
			*/
			var $status = $('#status');
			var status_val = $status.val();
			switch (status_val) {
				case 'pending':
					$status.val('draft');
					break;
				case 'draft':
					$status.val('draft');
					break;
				case 'published':
					$status.val('published');
			}
		}

		function setStatusOnPublish() {
			/* Handle published post state transitions
			pending -> published
			draft -> published
			*/
			var $status = $('#status');
			var status_val = $status.val();
			switch (status_val) {
				case 'pending':
					$status.val('published');
					break;
				case 'draft':
					$status.val('published');
			}
		}

		// Submit changes
		$("#item-edit-form").unbind("submit").submit(function(e) {
			e.preventDefault();

			// Let us know started saving
			$item_save_publish_button
				.addClass('saving')
				.html('<i class="pi-spin spin"></i> Saving...');

			$.ajax({
				url: "{{url_for('nodes.edit', node_id=node._id)}}",
				data: $(this).serialize(),
				type: 'POST'
			})
			.fail(function(xhr){
				// Something went wrong, notify
				toastr.error(xhr.statusText, 'Error ' + xhr.status);
				uiUpdateOnSave($item_save_publish_button);
			})
			.done(function(dataHtml){
				// Disable beforeunolad when submitting a form
				$(window).off('beforeunload');

				$('#col_right').html(dataHtml);
				loadComments("{{ url_for('nodes.comments_for_node', node_id=node._id) }}");

				toastr.success('Saved!');
				uiUpdateOnSave($item_save_publish_button);
			});
		});

		$item_save_publish_button.click(function(e){
			e.preventDefault();
			if ($(this).data('action') === 'save') {
				setStatusOnSave();
			} else if ($(this).data('action') === 'publish') {
				setStatusOnPublish();
			}
			$("#item-edit-form").submit();
		});


	});
| {% endblock footer_scripts %}
